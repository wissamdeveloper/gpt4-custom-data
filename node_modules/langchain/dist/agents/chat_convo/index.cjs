"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatConversationalAgent = exports.ChatConversationalAgentOutputParser = void 0;
const llm_chain_js_1 = require("../../chains/llm_chain.cjs");
const agent_js_1 = require("../agent.cjs");
const chat_js_1 = require("../../prompts/chat.cjs");
const template_js_1 = require("../../prompts/template.cjs");
const prompt_js_1 = require("./prompt.cjs");
const index_js_1 = require("../../schema/index.cjs");
class ChatConversationalAgentOutputParser extends index_js_1.BaseOutputParser {
    async parse(text) {
        let jsonOutput = text.trim();
        if (jsonOutput.includes("```json")) {
            jsonOutput = jsonOutput.split("```json")[1].trimStart();
        }
        if (jsonOutput.includes("```")) {
            jsonOutput = jsonOutput.split("```")[0].trimEnd();
        }
        if (jsonOutput.startsWith("```")) {
            jsonOutput = jsonOutput.slice(3).trimStart();
        }
        if (jsonOutput.endsWith("```")) {
            jsonOutput = jsonOutput.slice(0, -3).trimEnd();
        }
        const response = JSON.parse(jsonOutput);
        return { action: response.action, action_input: response.action_input };
    }
    getFormatInstructions() {
        return prompt_js_1.FORMAT_INSTRUCTIONS;
    }
}
exports.ChatConversationalAgentOutputParser = ChatConversationalAgentOutputParser;
/**
 * Agent for the MRKL chain.
 * @augments Agent
 */
class ChatConversationalAgent extends agent_js_1.Agent {
    constructor(input, outputParser) {
        super(input);
        Object.defineProperty(this, "outputParser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.outputParser =
            outputParser ?? new ChatConversationalAgentOutputParser();
    }
    _agentType() {
        /** Not turning on serialization until more sure of abstractions. */
        throw new Error("Method not implemented.");
    }
    observationPrefix() {
        return "Observation: ";
    }
    llmPrefix() {
        return "Thought:";
    }
    _stop() {
        return ["Observation:"];
    }
    static validateTools(tools) {
        const invalidTool = tools.find((tool) => !tool.description);
        if (invalidTool) {
            const msg = `Got a tool ${invalidTool.name} without a description.` +
                ` This agent requires descriptions for all tools.`;
            throw new Error(msg);
        }
    }
    constructScratchPad(steps) {
        const thoughts = [];
        for (const step of steps) {
            thoughts.push(new index_js_1.AIChatMessage(step.action.log));
            thoughts.push(new index_js_1.HumanChatMessage((0, template_js_1.renderTemplate)(prompt_js_1.TEMPLATE_TOOL_RESPONSE, "f-string", {
                observation: step.observation,
            })));
        }
        return thoughts;
    }
    /**
     * Create prompt in the style of the zero shot agent.
     *
     * @param tools - List of tools the agent will have access to, used to format the prompt.
     * @param args - Arguments to create the prompt with.
     * @param args.suffix - String to put after the list of tools.
     * @param args.prefix - String to put before the list of tools.
     */
    static createPrompt(tools, args) {
        const { systemMessage = prompt_js_1.PREFIX, humanMessage = prompt_js_1.SUFFIX, outputParser = new ChatConversationalAgentOutputParser(), } = args ?? {};
        const toolStrings = tools
            .map((tool) => `${tool.name}: ${tool.description}`)
            .join("\n");
        const formatInstructions = (0, template_js_1.renderTemplate)(humanMessage, "f-string", {
            format_instructions: outputParser.getFormatInstructions(),
        });
        const toolNames = tools.map((tool) => tool.name).join("\n");
        const finalPrompt = (0, template_js_1.renderTemplate)(formatInstructions, "f-string", {
            tools: toolStrings,
            tool_names: toolNames,
        });
        const messages = [
            chat_js_1.SystemMessagePromptTemplate.fromTemplate(systemMessage),
            new chat_js_1.MessagesPlaceholder("chat_history"),
            chat_js_1.HumanMessagePromptTemplate.fromTemplate(finalPrompt),
            new chat_js_1.MessagesPlaceholder("agent_scratchpad"),
        ];
        return chat_js_1.ChatPromptTemplate.fromPromptMessages(messages);
    }
    static fromLLMAndTools(llm, tools, args) {
        ChatConversationalAgent.validateTools(tools);
        const prompt = ChatConversationalAgent.createPrompt(tools, args);
        const chain = new llm_chain_js_1.LLMChain({ prompt, llm });
        const { outputParser = new ChatConversationalAgentOutputParser() } = args ?? {};
        return new ChatConversationalAgent({
            llmChain: chain,
            allowedTools: tools.map((t) => t.name),
        }, outputParser);
    }
    async extractToolAndInput(text) {
        try {
            const response = (await this.outputParser.parse(text));
            return { tool: response.action, input: response.action_input };
        }
        catch {
            throw new Error(`Unable to parse JSON response from chat agent.\n\n${text}`);
        }
    }
}
exports.ChatConversationalAgent = ChatConversationalAgent;
