"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initializeAgentExecutor = void 0;
const executor_js_1 = require("./executor.cjs");
const index_js_1 = require("./mrkl/index.cjs");
const index_js_2 = require("./chat_convo/index.cjs");
const index_js_3 = require("./chat/index.cjs");
const index_js_4 = require("../callbacks/index.cjs");
const initializeAgentExecutor = async (tools, llm, _agentType, _verbose, _callbackManager) => {
    const agentType = _agentType ?? "zero-shot-react-description";
    const verbose = _verbose ?? !!_callbackManager;
    const callbackManager = _callbackManager ?? (0, index_js_4.getCallbackManager)();
    switch (agentType) {
        case "zero-shot-react-description":
            return executor_js_1.AgentExecutor.fromAgentAndTools({
                agent: index_js_1.ZeroShotAgent.fromLLMAndTools(llm, tools),
                tools,
                returnIntermediateSteps: true,
                verbose,
                callbackManager,
            });
        case "chat-zero-shot-react-description":
            return executor_js_1.AgentExecutor.fromAgentAndTools({
                agent: index_js_3.ChatAgent.fromLLMAndTools(llm, tools),
                tools,
                returnIntermediateSteps: true,
                verbose,
                callbackManager,
            });
        case "chat-conversational-react-description":
            return executor_js_1.AgentExecutor.fromAgentAndTools({
                agent: index_js_2.ChatConversationalAgent.fromLLMAndTools(llm, tools),
                tools,
                verbose,
                callbackManager,
            });
        default:
            throw new Error("Unknown agent type");
    }
};
exports.initializeAgentExecutor = initializeAgentExecutor;
