"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTracerSession = exports.getCallbackManager = exports.SingletonCallbackManager = void 0;
const tracers_js_1 = require("./tracers.cjs");
const base_js_1 = require("./base.cjs");
class SingletonCallbackManager extends base_js_1.CallbackManager {
    constructor() {
        super();
    }
    static getInstance() {
        if (!SingletonCallbackManager.instance) {
            SingletonCallbackManager.instance = new SingletonCallbackManager();
            SingletonCallbackManager.instance.addHandler(new base_js_1.ConsoleCallbackHandler());
            if (typeof process !== "undefined" &&
                // eslint-disable-next-line no-process-env
                process.env.LANGCHAIN_HANDLER === "langchain") {
                SingletonCallbackManager.instance.addHandler(new tracers_js_1.LangChainTracer());
            }
        }
        return SingletonCallbackManager.instance;
    }
}
exports.SingletonCallbackManager = SingletonCallbackManager;
function getCallbackManager() {
    return SingletonCallbackManager.getInstance();
}
exports.getCallbackManager = getCallbackManager;
async function setTracerSession(options, callbackManager = getCallbackManager()) {
    for (const handler of callbackManager.handlers) {
        // fine to use instanceof here because we're in the same package
        // eslint-disable-next-line no-instanceof/no-instanceof
        if (handler instanceof tracers_js_1.LangChainTracer) {
            const sessionName = options?.sessionName;
            if (sessionName) {
                await handler.loadSession(sessionName);
            }
            else {
                await handler.loadDefaultSession();
            }
        }
    }
}
exports.setTracerSession = setTracerSession;
