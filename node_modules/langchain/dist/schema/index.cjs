"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseChatMessageHistory = exports.OutputParserException = exports.BaseOutputParser = exports.BaseRetriever = exports.BasePromptValue = exports.ChatMessage = exports.SystemChatMessage = exports.AIChatMessage = exports.HumanChatMessage = exports.BaseChatMessage = void 0;
class BaseChatMessage {
    constructor(text) {
        /** The text of the message. */
        Object.defineProperty(this, "text", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /** The name of the message sender in a multi-user chat. */
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.text = text;
    }
}
exports.BaseChatMessage = BaseChatMessage;
class HumanChatMessage extends BaseChatMessage {
    _getType() {
        return "human";
    }
}
exports.HumanChatMessage = HumanChatMessage;
class AIChatMessage extends BaseChatMessage {
    _getType() {
        return "ai";
    }
}
exports.AIChatMessage = AIChatMessage;
class SystemChatMessage extends BaseChatMessage {
    _getType() {
        return "system";
    }
}
exports.SystemChatMessage = SystemChatMessage;
class ChatMessage extends BaseChatMessage {
    constructor(text, role) {
        super(text);
        Object.defineProperty(this, "role", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.role = role;
    }
    _getType() {
        return "generic";
    }
}
exports.ChatMessage = ChatMessage;
/**
 * Base PromptValue class. All prompt values should extend this class.
 */
class BasePromptValue {
}
exports.BasePromptValue = BasePromptValue;
/**
 * Base Index class. All indexes should extend this class.
 */
class BaseRetriever {
}
exports.BaseRetriever = BaseRetriever;
/** Class to parse the output of an LLM call.
 */
class BaseOutputParser {
    async parseWithPrompt(text, _prompt) {
        return this.parse(text);
    }
    /**
     * Return the string type key uniquely identifying this class of parser
     */
    _type() {
        throw new Error("_type not implemented");
    }
}
exports.BaseOutputParser = BaseOutputParser;
class OutputParserException extends Error {
    constructor(message) {
        super(message);
    }
}
exports.OutputParserException = OutputParserException;
class BaseChatMessageHistory {
}
exports.BaseChatMessageHistory = BaseChatMessageHistory;
