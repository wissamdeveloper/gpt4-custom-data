import type { SerializedStuffDocumentsChain, SerializedMapReduceDocumentsChain, SerializedRefineDocumentsChain } from "./serde.js";
import { BaseChain } from "./base.js";
import { LLMChain } from "./llm_chain.js";
import { Document } from "../document.js";
import { ChainValues } from "../schema/index.js";
import { BasePromptTemplate } from "../prompts/base.js";
export interface StuffDocumentsChainInput {
    /** LLM Wrapper to use after formatting documents */
    llmChain: LLMChain;
    inputKey: string;
    outputKey: string;
    /** Variable name in the LLM chain to put the documents in */
    documentVariableName: string;
}
/**
 * Chain that combines documents by stuffing into context.
 * @augments BaseChain
 * @augments StuffDocumentsChainInput
 */
export declare class StuffDocumentsChain extends BaseChain implements StuffDocumentsChainInput {
    llmChain: LLMChain;
    inputKey: string;
    outputKey: string;
    documentVariableName: string;
    get inputKeys(): string[];
    constructor(fields: {
        llmChain: LLMChain;
        inputKey?: string;
        outputKey?: string;
        documentVariableName?: string;
    });
    _call(values: ChainValues): Promise<ChainValues>;
    _chainType(): "stuff_documents_chain";
    static deserialize(data: SerializedStuffDocumentsChain): Promise<StuffDocumentsChain>;
    serialize(): SerializedStuffDocumentsChain;
}
export interface MapReduceDocumentsChainInput extends StuffDocumentsChainInput {
    maxTokens: number;
    maxIterations: number;
    combineDocumentsChain: BaseChain;
}
/**
 * Combine documents by mapping a chain over them, then combining results.
 * @augments BaseChain
 * @augments StuffDocumentsChainInput
 */
export declare class MapReduceDocumentsChain extends BaseChain implements StuffDocumentsChainInput {
    llmChain: LLMChain;
    inputKey: string;
    outputKey: string;
    documentVariableName: string;
    get inputKeys(): string[];
    maxTokens: number;
    maxIterations: number;
    ensureMapStep: boolean;
    combineDocumentChain: BaseChain;
    constructor(fields: {
        llmChain: LLMChain;
        combineDocumentChain: BaseChain;
        ensureMapStep?: boolean;
        inputKey?: string;
        outputKey?: string;
        documentVariableName?: string;
        maxTokens?: number;
        maxIterations?: number;
    });
    _call(values: ChainValues): Promise<ChainValues>;
    _chainType(): "map_reduce_documents_chain";
    static deserialize(data: SerializedMapReduceDocumentsChain): Promise<MapReduceDocumentsChain>;
    serialize(): SerializedMapReduceDocumentsChain;
}
export interface RefineDocumentsChainInput extends StuffDocumentsChainInput {
    refineLLMChain: LLMChain;
    documentPrompt: BasePromptTemplate;
}
/**
 * Combine documents by doing a first pass and then refining on more documents.
 * @augments BaseChain
 * @augments RefineDocumentsChainInput
 */
export declare class RefineDocumentsChain extends BaseChain implements RefineDocumentsChainInput {
    llmChain: LLMChain;
    inputKey: string;
    outputKey: string;
    documentVariableName: string;
    initialResponseName: string;
    refineLLMChain: LLMChain;
    get defaultDocumentPrompt(): BasePromptTemplate;
    documentPrompt: BasePromptTemplate;
    get inputKeys(): string[];
    constructor(fields: {
        llmChain: LLMChain;
        refineLLMChain: LLMChain;
        inputKey?: string;
        outputKey?: string;
        documentVariableName?: string;
        documentPrompt?: BasePromptTemplate;
        initialResponseName?: string;
    });
    _constructInitialInputs(doc: Document, rest: Record<string, unknown>): Promise<{
        [x: string]: unknown;
    }>;
    _constructRefineInputs(doc: Document, res: string): Promise<{
        [x: string]: unknown;
    }>;
    _call(values: ChainValues): Promise<ChainValues>;
    _chainType(): "refine_documents_chain";
    static deserialize(data: SerializedRefineDocumentsChain): Promise<RefineDocumentsChain>;
    serialize(): SerializedRefineDocumentsChain;
}
